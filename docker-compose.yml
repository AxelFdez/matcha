services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - VUE_APP_API_URL=${VUE_APP_API_URL}
        - VUE_APP_WS_URL=${VUE_APP_WS_URL}
    ports:
      - "8080:8080"
    depends_on:
      - backend
    networks:
      - matcha-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=${NODE_ENV}
      - PGUSER=${PGUSER}
      - PGHOST=${PGHOST}
      - PGDATABASE=${PGDATABASE}
      - PGPASSWORD=${PGPASSWORD}
      - PGPORT=${PGPORT}
      - FRONT_URL=${FRONT_URL}
      - JWT_SECRET=${JWT_SECRET}
      - REFRESH_TOKEN_SECRET=${REFRESH_TOKEN_SECRET}
      - IPINFO_TOKEN=${IPINFO_TOKEN}
      - BREVO_API_KEY=${BREVO_API_KEY}
    volumes:
      - ./backend:/app
      - /app/node_modules
    command: npm run dev
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - matcha-network

  postgres:
    image: postgres:17.4
    environment:
      - POSTGRES_DB=${PGDATABASE}
      - POSTGRES_USER=${PGUSER}
      - POSTGRES_PASSWORD=${PGPASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PGUSER} -d ${PGDATABASE}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - matcha-network

  adminer:
    image: adminer:4.8.1
    ports:
      - "8081:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
    depends_on:
      - postgres
    networks:
      - matcha-network

volumes:
  postgres_data:
    

networks:
  matcha-network:
    driver: bridge